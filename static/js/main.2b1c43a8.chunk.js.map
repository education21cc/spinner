{"version":3,"sources":["components/Spinner/Ring.tsx","components/Spinner/index.tsx","components/App/index.tsx","serviceWorker.ts","index.tsx"],"names":["Phase","Ring","props","caret","useRef","ref","items","useMemo","console","log","className","shuffle","data","useEffect","current","update","map","i","item","image","key","style","backgroundImage","originalArray","temporaryValue","array","Object","assign","currentIndex","length","randomIndex","Math","floor","random","parent","transitionTime","phase","firstAndLast","halfItems","counter","children","element","transition","abs","visibility","top","Spinner","risks","events","effects","App","content","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yMAYKA,E,0CAAAA,K,gBAAAA,E,gBAAAA,E,aAAAA,E,4BAAAA,M,KAQL,IAuCeC,EAvCF,SAACC,GACZ,IAAMC,EAAQC,iBAAO,GACfC,EAAMD,iBAAuB,MAC7BE,EAAQC,mBAAQ,WAEpB,OADAC,QAAQC,IAAI,aAAcP,EAAMQ,WACzBC,EAAQT,EAAMU,QACpB,CAACV,EAAMU,OAEVC,qBAAU,WACHR,EAAIS,SACTC,EAAOV,EAAIS,QAASR,EAAOH,EAAMW,WAChC,CAACR,IAqBJ,OACE,yBAAKI,UAAS,eAAUR,EAAMQ,WAAaL,IAAKA,GAC7CC,EAAMU,KAAI,SAACC,GAAD,OArBKC,EAqBaD,EApB3Bf,EAAMiB,MAEN,yBACEC,IAAKF,EACLR,UAAU,OACVW,MAAO,CACLC,gBAAgB,OAAD,OAASJ,EAAT,QAMrB,yBAAKE,IAAKF,EAAMR,UAAU,QACvBQ,GAdY,IAACA,OA4BhBP,EAAU,SAACY,GAKf,IAJA,IAEIC,EAFEC,EAAQC,OAAOC,OAAO,GAAIJ,GAC5BK,EAAeH,EAAMI,OAGlB,IAAMD,GAAc,CACzB,IAAME,EAAcC,KAAKC,MAAMD,KAAKE,SAAWL,GAE/CJ,EAAiBC,EADjBG,GAAgB,GAEhBH,EAAMG,GAAgBH,EAAMK,GAC5BL,EAAMK,GAAeN,EAEvB,OAAOC,GAGHV,EAAS,SAACmB,EAAwB5B,EAAiBH,GAIvD,IAJ2J,IAArFgC,EAAoF,uDAlEhI,GAkE0FC,EAAsC,uDAAvBpC,EAAMqC,aAEnIC,EAAYP,KAAKC,MAAM1B,EAAMuB,OAAS,GACxCU,EAAU,EACLtB,EAAId,EAAOc,EAAIiB,EAAOM,SAASX,OAAS1B,EAAOc,IAAK,CACzD,IAAMwB,EAAUP,EAAOM,SAASvB,EAAIX,EAAMuB,QAC1CY,EAAQpB,MAAMqB,WAAd,cAAkCP,EAAlC,aAAqDC,GAGjDL,KAAKY,KAAK1B,EAAId,IAAUG,EAAMuB,OAAS,IAAM,GAC7CY,EAAQpB,MAAMqB,WAAd,cAAkCP,EAAlC,aAAqDC,GACrDK,EAAQpB,MAAMuB,WAAa,YAG3BH,EAAQpB,MAAMqB,WAAa,GAC3BD,EAAQpB,MAAMuB,WAAa,UAK3BH,EAAQpB,MAAMwB,IAAd,UAFAN,EAAUD,GAE0B,IAAbA,EAAuC,KAACA,EAAaA,EAAY,EAAKC,GAG/D,IAAPA,EAHvB,MAKJA,MClFSO,G,KAVC,SAAC5C,GACf,OACE,yBAAKQ,UAAU,WACb,kBAAC,EAAD,CAAMA,UAAU,QAAQE,KAAMV,EAAMU,KAAKmC,MAAO5B,OAAO,IACvD,kBAAC,EAAD,CAAMT,UAAU,QAAQE,KAAMV,EAAMU,KAAKoC,SACzC,kBAAC,EAAD,CAAMtC,UAAU,QAAQE,KAAMV,EAAMU,KAAKqC,aCNzCrC,G,WAA8B,CAClC,OAAU,EACV,SAAY,CACR,OAAS,GAEb,QAAW,CACP,MAAS,CACL,uBACA,qBACA,qBACA,qBACA,sBACA,oBACA,uBAEJ,OAAU,CACN,mCACA,eACA,kCACA,iBACA,qCACA,0BACA,uBAEJ,QAAW,CACP,iCACA,yBACA,6BACA,aACA,mCACA,oCACA,gBAGR,aAAgB,CAAC,CACb,IAAO,YACP,MAAS,oDAEb,gBAAmB,CAAC,CAChB,MAAS,EACT,MAAS,EACT,SAAY,MAeHsC,EAVH,WACV,OACE,yBAAKxC,UAAU,cACb,yBAAKA,UAAU,UACb,kBAAC,EAAD,CAASE,KAAMA,EAAKuC,aC9CRC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDkIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7D,QAAQ6D,MAAMA,EAAMC,c","file":"static/js/main.2b1c43a8.chunk.js","sourcesContent":["import React, { useMemo, useRef, useEffect } from 'react';\n\ninterface Props {\n  data: string[];\n  className: string;\n  image?: boolean;\n}\n\nconst ITEM_HEIGHT = 224;\nconst MARGIN = 10;\nconst BASE_ANIMATION_TIME = 0.2; // amount of time to scroll one item\n\nenum Phase {\n  first = 'ease-in',\n  last = 'ease-out',\n  mid = 'linear',\n  firstAndLast = 'ease-in-out'\n}\n\n\nconst Ring = (props: Props) => {\n  const caret = useRef(0);\n  const ref = useRef<HTMLDivElement>(null);\n  const items = useMemo(() => {\n    console.log('shufflning', props.className)\n    return shuffle(props.data);\n  }, [props.data]);\n\n  useEffect(() => {\n    if (!ref.current) return;\n    update(ref.current, items, caret.current);\n  }, [items]);\n\n  const renderItem = (item: string) => {\n    if (props.image) {\n      return (\n        <div \n          key={item}\n          className=\"item\"\n          style={{\n            backgroundImage: `url(${item})`\n          }}\n        />\n      );\n    }\n    return (\n      <div key={item} className=\"item\">\n        {item}\n      </div>\n    );\n  }\n\n  return (\n    <div className={`ring ${props.className}`} ref={ref}>\n      {items.map((i) => renderItem(i))}\n    </div>\n  )\n}\n\nexport default Ring;\n\nconst shuffle = (originalArray: string[]) => {\n  const array = Object.assign([], originalArray);\n  let currentIndex = array.length;\n  let temporaryValue;\n\n  while (0 !== currentIndex) {\n    const randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n  return array;\n};\n\nconst update = (parent: HTMLDivElement, items: string[], caret: number, transitionTime: number = BASE_ANIMATION_TIME, phase: Phase = Phase.firstAndLast) => {\n\n  const halfItems = Math.floor(items.length / 2);\n  let counter = 0;\n  for (let i = caret; i < parent.children.length + caret; i++) {\n      const element = parent.children[i % items.length] as HTMLElement;\n      element.style.transition = `top ${transitionTime}s ${phase}`;\n\n      // Add animation only to the current card and those above and below\n      if (Math.abs((i - caret) % (items.length - 1)) < 2) {\n          element.style.transition = `top ${transitionTime}s ${phase}`;\n          element.style.visibility = 'visible';\n      }\n      else {\n          element.style.transition = '';\n          element.style.visibility = 'hidden';\n      }\n\n      if (counter > halfItems) {\n          // Draw above (please dont ask me why this works. it works, allright?)\n          element.style.top = `${halfItems * -(ITEM_HEIGHT + MARGIN) - ((halfItems + (halfItems % 2) - counter) * (ITEM_HEIGHT + MARGIN))}px`;\n      } else {\n          // Draw below\n          element.style.top = `${counter * (ITEM_HEIGHT + MARGIN)}px`;\n      }\n      counter++;\n  }\n}","import React from 'react';\nimport { SpinnerData } from '../../data/SpinnerData';\nimport Ring from './Ring';\nimport './styles/spinner.scss';\n\ninterface Props {\n  data: SpinnerData;\n}\n\nconst Spinner = (props: Props) => {\n  return (\n    <div className=\"spinner\">\n      <Ring className=\"ring1\" data={props.data.risks} image={true}/>\n      <Ring className=\"ring2\" data={props.data.events} />\n      <Ring className=\"ring3\" data={props.data.effects} />\n    </div>\n  );\n}\n\nexport default Spinner;","import React from 'react';\nimport Spinner from '../Spinner';\nimport './styles/app.scss';\nimport './../styles/common.scss'\nimport { SpinnerData } from '../../data/SpinnerData';\nimport { GameData } from '../../data/GameData';\n\n\nconst data: GameData<SpinnerData> = {\n  'userId': 1,\n  'settings': {\n      'muted': false\n  },\n  'content': {\n      'risks': [\n          'images/aanraking.png',\n          'images/giftige.png',\n          'images/machine.png',\n          'images/snijden.png',\n          'images/spanning.png',\n          'images/vallen.png',\n          'images/zuurstof.png',\n      ],\n      'events': [\n          'Aanraking koude of hete goederen',\n          'Vergiftiging',\n          'Werken met gevaarlijke machines',\n          'Jezelf snijden',\n          'Aanraking geleiders onder spannnig',\n          'Vallen van grote hoogte',\n          'Zuurstof&shy;tekort',\n      ],\n      'effects': [\n          'Brand&shy;wonden of bevriezing',\n          'Inademing giftige stof',\n          'Ernstige verwon&shy;dingen',\n          'Snijwonden',\n          'Brand&shy;wonden en electrocutie',\n          'Verwon&shy;dingen aan het lichaam',\n          'Verstikking',\n      ]\n  },\n  'translations': [{\n      'key': 'heartLeft',\n      'value': 'Stop onmiddellijk met werken (eigen veiligheid)'\n  }],\n  'levelsCompleted': [{\n      'level': 1,\n      'score': 2,\n      'maxScore': 2\n  }]\n};\n\n\nconst App = () => {\n  return (\n    <div className=\"background\">\n      <div className=\"center\">\n        <Spinner data={data.content} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}